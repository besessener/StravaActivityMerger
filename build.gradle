plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'groovy'
    id "com.github.johnrengelman.processes" version "0.5.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.3.2"
    id "org.openapi.generator" version "5.1.1"
    id "de.undercouch.download" version "4.1.1"
    id "idea"
}

apply plugin: "com.github.johnrengelman.processes"
apply plugin: "org.springdoc.openapi-gradle-plugin"
apply plugin: 'org.openapi.generator'
apply plugin: 'idea'

group = 'me.strava.activitymerger'
version = '0.1'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation project(':src-api')
    implementation("org.openapitools:openapi-generator-gradle-plugin:5.1.1") {
        exclude module: "slf4j-simple"
    }
    implementation('org.codehaus.groovy.modules.http-builder:http-builder:0.7')
    implementation('org.codehaus.groovy:groovy-all:2.4.15')
    implementation('org.springdoc:springdoc-openapi-groovy:1.5.2')
    implementation('org.springdoc:springdoc-openapi-ui:1.5.2')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.codehaus.groovy:groovy')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

test {
    useJUnitPlatform()
}

openApi {
    outputDir.set(file("${project.getRootDir()}/docs/api-definition"))
    outputFileName.set("api-definition.yaml")
    waitTimeInSeconds.set(15)
    apiDocsUrl.set("http://localhost/v3/api-docs")
}

openApiGenerate {
    generatorName = "asciidoc"
    inputSpec = "${project.getRootDir()}/docs/api-definition/api-definition.yaml".toString()
    outputDir = "${project.getRootDir()}/docs/api".toString()
    configOptions = [
            dateLibrary    : "java8",
            appDescription : "A Groovy App to merge Strava activities.",
            appName        : project.name,
            useIntroduction: "true"
    ]
}

task downloadStravaApi(type: Download) {
    src 'https://developers.strava.com/swagger/swagger.json'
    dest "$buildDir/generated/strava-api-definition/api.json"
    overwrite true
    acceptAnyCertificate true
}

task downloadSwaggerJar(type: Download) {
    src 'https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.12/swagger-codegen-cli-2.4.12.jar'
    dest "$buildDir/generated/strava-api-definition/swagger.jar"
    overwrite true
    acceptAnyCertificate true
}

task runSwaggerCodeGen(type: Exec, dependsOn: ['downloadSwaggerJar', 'downloadStravaApi']) {
    commandLine "java", "-jar", "$buildDir\\generated\\strava-api-definition\\swagger.jar", "generate", "-l", "java", "-i", "$buildDir\\generated\\strava-api-definition\\api.json", "-o", "${project.getRootDir()}\\src-api"
}

bootRun.dependsOn(['build'])
build.dependsOn(['openApiGenerate', 'runSwaggerCodeGen'])
tasks.openApiGenerate.dependsOn('generateOpenApiDocs')
